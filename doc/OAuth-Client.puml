@startuml
'https://plantuml.com/class-diagram

class ClientRegistration {
    String registrationId
    String clientId
    String clientSecret
    ClientAuthenticationMethod clientAuthenticationMethod
    AuthorizationGrantType authorizationGrantType
    String redirectUri
    Set<String> scopes
    ProviderDetails providerDetails
    String clientName
}

class ClientRegistrationRepository {
    ClientRegistration findByRegistrationId(String registrationId)
}

class OAuth2AuthorizedClient {
	ClientRegistration clientRegistration;
	String principalName;
	OAuth2AccessToken accessToken;
	OAuth2RefreshToken refreshToken;
}
class InMemoryClientRegistrationRepository implements ClientRegistrationRepository {
    Map<String, ClientRegistration> registrations
}

class OAuth2AuthorizedClient{
    ClientRegistration clientRegistration
    String principalName
    OAuth2AccessToken accessToken
    OAuth2RefreshToken refreshToken
}

interface OAuth2AuthorizedClientRepository {
	<T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String clientRegistrationId, Authentication principal,
			HttpServletRequest request);
	void saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, Authentication principal,
			HttpServletRequest request, HttpServletResponse response);
	void removeAuthorizedClient(String clientRegistrationId, Authentication principal, HttpServletRequest request,
			HttpServletResponse response);
}

interface OAuth2AuthorizedClientService {
	<T extends OAuth2AuthorizedClient> T loadAuthorizedClient(String clientRegistrationId, String principalName);
	void saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, Authentication principal);
	void removeAuthorizedClient(String clientRegistrationId, String principalName);
}

class AuthenticatedPrincipalOAuth2AuthorizedClientRepository implements OAuth2AuthorizedClientRepository {
	AuthenticationTrustResolver authenticationTrustResolver;
	OAuth2AuthorizedClientService authorizedClientService;
	private OAuth2AuthorizedClientRepository anonymousAuthorizedClientRepository
}
class HttpSessionOAuth2AuthorizedClientRepository implements OAuth2AuthorizedClientRepository {
	static final String DEFAULT_AUTHORIZED_CLIENTS_ATTR_NAME = HttpSessionOAuth2AuthorizedClientRepository.class
			.getName() + ".AUTHORIZED_CLIENTS";
	String sessionAttributeName = DEFAULT_AUTHORIZED_CLIENTS_ATTR_NAME;
}

class InMemoryOAuth2AuthorizedClientService implements OAuth2AuthorizedClientService {
	Map<OAuth2AuthorizedClientId, OAuth2AuthorizedClient> authorizedClients;
	ClientRegistrationRepository clientRegistrationRepository;
}

class JdbcOAuth2AuthorizedClientService implements OAuth2AuthorizedClientService {
}

interface OAuth2AuthorizedClientManager {
	OAuth2AuthorizedClient authorize(OAuth2AuthorizeRequest authorizeRequest);
}
class AuthorizedClientServiceOAuth2AuthorizedClientManager implements OAuth2AuthorizedClientManager {

}

class DefaultOAuth2AuthorizedClientManager implements OAuth2AuthorizedClientManager {
}

interface OAuth2AuthorizedClientProvider {
	OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context);

}
@enduml